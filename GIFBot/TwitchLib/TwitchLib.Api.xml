<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TwitchLib.Api</name>
    </assembly>
    <members>
        <member name="T:TwitchLib.Api.Auth.Auth">
            <summary>These endpoints fall outside of Helix, and relate to Authorization</summary>
        </member>
        <member name="M:TwitchLib.Api.Auth.Auth.RefreshAuthTokenAsync(System.String,System.String,System.String)">
            <summary>
                <para>[ASYNC] Refreshes an expired auth token</para>
                <para>ATTENTION: Client Secret required. Never expose it to consumers!</para>
                <para>Throws a BadRequest Exception if the request fails due to a bad refresh token</para>
            </summary>
            <returns>A RefreshResponse object that holds your new auth and refresh token and the list of scopes for that token</returns>
        </member>
        <member name="M:TwitchLib.Api.Auth.Auth.GetAuthorizationCodeUrl(System.String,System.Collections.Generic.IEnumerable{TwitchLib.Api.Core.Enums.AuthScopes},System.Boolean,System.String,System.String)">
            <summary>
            Generates an authorization code URL. Please see OAuth authorization code flow https://dev.twitch.tv/docs/authentication/getting-tokens-oauth/#oauth-authorization-code-flow.
            </summary>
            <param name="redirectUri">Your registered redirect URI. This must exactly match the redirect URI registered in the prior, Registration step.</param>
            <param name="scopes">Space-separated list of scopes.</param>
            <param name="forceVerify">Specifies whether the user should be re-prompted for authorization. If this is true, the user always is prompted to confirm authorization. This is useful to allow your users to switch Twitch accounts, since there is no way to log users out of the API. Default: false (a given user sees the authorization page for a given set of scopes only the first time through the sequence).</param>
            <param name="state">Your unique token, generated by your application. This is an OAuth 2.0 opaque value, used to avoid CSRF attacks. This value is echoed back in the response. We strongly recommend you use this.</param>
            <param name="clientId">Your client ID.</param>
            <returns>A URL encoded string that can be used to generate a user authorization code.</returns>
            <exception cref="T:TwitchLib.Api.Core.Exceptions.BadParameterException">Thrown when any of the required parameters are not valid.</exception>
        </member>
        <member name="M:TwitchLib.Api.Auth.Auth.GetAccessTokenFromCodeAsync(System.String,System.String,System.String,System.String)">
            <summary>
                <para>[ASYNC] Uses an authorization code to generate an access token</para>
                <para>ATTENTION: Client Secret required. Never expose it to consumers!</para>
                <para>Throws a BadRequest Exception if the request fails due to a bad code token</para>
            </summary>
            <param name="code">The OAuth 2.0 authorization code is a 30-character, randomly generated string. Used in the request made to the token endpoint in exchange for an access token.</param>
            <param name="clientSecret">Required for API access.</param>
            <param name="redirectUri">The URI the user was redirected to. This URI must be registered with your twitch app or extension.</param>
            <param name="clientId">The client ID of your app or extension.</param>
            <returns>A RefreshResponse object that holds your new auth and refresh token and the list of scopes for that token</returns>
        </member>
        <member name="M:TwitchLib.Api.Auth.Auth.ValidateAccessTokenAsync(System.String)">
            <summary>
            Checks the validation of the Settings.AccessToken or passed in AccessToken. If invalid, a null response is returned
            </summary>
            <param name="accessToken">Optional access token to check validation on</param>
            <returns>ValidateAccessTokenResponse</returns>
        </member>
        <member name="P:TwitchLib.Api.Services.ApiService.ChannelsToMonitor">
            <summary>
            The list with channels to monitor.
            </summary>
        </member>
        <member name="P:TwitchLib.Api.Services.ApiService.IntervalInSeconds">
            <summary>
            How often the service is being updated in seconds.
            </summary>
        </member>
        <member name="P:TwitchLib.Api.Services.ApiService.Enabled">
            <summary>
            Whether the service is currently enabled or not.
            </summary>
        </member>
        <member name="E:TwitchLib.Api.Services.ApiService.OnServiceStarted">
            <summary>
            Event invoked when the service has started.
            </summary>
        </member>
        <member name="E:TwitchLib.Api.Services.ApiService.OnServiceStopped">
            <summary>
            Event invoked when the service has stopped.
            </summary>
        </member>
        <member name="E:TwitchLib.Api.Services.ApiService.OnServiceTick">
            <summary>
            Event invoked when the service is updating.
            </summary>
        </member>
        <member name="E:TwitchLib.Api.Services.ApiService.OnChannelsSet">
            <summary>
            Event invoked when the channels have been set.
            </summary>
        </member>
        <member name="M:TwitchLib.Api.Services.ApiService.#ctor(TwitchLib.Api.Interfaces.ITwitchAPI,System.Int32)">
            <summary>
            Constructor from the ApiService.
            </summary>
            <exception cref="T:System.ArgumentNullException">When the <paramref name="api"/> is null.</exception>
            <exception cref="T:System.ArgumentException">When the <paramref name="checkIntervalInSeconds"/> is lower than one second.</exception> 
            <param name="api">The api used to query information.</param>
            <param name="checkIntervalInSeconds"></param>
        </member>
        <member name="M:TwitchLib.Api.Services.ApiService.Start">
            <summary>
            Starts the service.
            </summary>
            <exception cref="T:System.InvalidOperationException">When no channels have been added to the service</exception> 
            <exception cref="T:System.InvalidOperationException">When the service has already been started.</exception>
        </member>
        <member name="M:TwitchLib.Api.Services.ApiService.Stop">
            <summary>
            Stops the service.
            </summary>
            <exception cref="T:System.InvalidOperationException">When the service hasn't started yet, or has already been stopped.</exception>
        </member>
        <member name="M:TwitchLib.Api.Services.ApiService.SetChannels(System.Collections.Generic.List{System.String})">
            <summary>
            Sets channels by to monitor.
            </summary>
            <exception cref="T:System.ArgumentNullException">When <paramref name="channelsToMonitor"/> is null.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="channelsToMonitor"/> is empty.</exception>
            <param name="channelsToMonitor">The channels to monitor.</param>
        </member>
        <member name="M:TwitchLib.Api.Services.ApiService.OnServiceTimerTick">
            <summary>
            Called when the service timer ticks. Invokes the <see cref="E:TwitchLib.Api.Services.ApiService.OnServiceTick"/> event.
            </summary>
        </member>
        <member name="T:TwitchLib.Api.Services.Events.FollowerService.OnNewFollowersDetectedArgs">
            <inheritdoc />
            <summary>
            Class representing EventArgs for OnNewFollowersDetected event.
            </summary>
        </member>
        <member name="F:TwitchLib.Api.Services.Events.FollowerService.OnNewFollowersDetectedArgs.Channel">
            <summary>Event property representing channel the service is currently monitoring.</summary>
        </member>
        <member name="F:TwitchLib.Api.Services.Events.FollowerService.OnNewFollowersDetectedArgs.NewFollowers">
            <summary>Event property representing all new followers detected.</summary>
        </member>
        <member name="T:TwitchLib.Api.Services.Events.LiveStreamMonitor.OnStreamOfflineArgs">
            <inheritdoc />
            <summary>
            Class representing EventArgs for OnStreamOffline event.
            </summary>
        </member>
        <member name="F:TwitchLib.Api.Services.Events.LiveStreamMonitor.OnStreamOfflineArgs.Channel">
            <summary>
            The channel that has gone online.
            </summary>
        </member>
        <member name="F:TwitchLib.Api.Services.Events.LiveStreamMonitor.OnStreamOfflineArgs.Stream">
            <summary>
            The channel's live stream information.
            </summary>
        </member>
        <member name="T:TwitchLib.Api.Services.Events.LiveStreamMonitor.OnStreamOnlineArgs">
            <inheritdoc />
            <summary>
            Class representing EventArgs for OnStreamOnline event.
            </summary>
        </member>
        <member name="F:TwitchLib.Api.Services.Events.LiveStreamMonitor.OnStreamOnlineArgs.Channel">
            <summary>
            Event property representing channel that has gone online.
            </summary>
        </member>
        <member name="F:TwitchLib.Api.Services.Events.LiveStreamMonitor.OnStreamOnlineArgs.Stream">
            <summary>
            Event property representing live stream information.
            </summary>
        </member>
        <member name="T:TwitchLib.Api.Services.Events.LiveStreamMonitor.OnStreamUpdateArgs">
            <inheritdoc />
            <summary>
            Class representing EventArgs for OnStreamUpdate event.
            </summary>
        </member>
        <member name="F:TwitchLib.Api.Services.Events.LiveStreamMonitor.OnStreamUpdateArgs.Channel">
            <summary>
            Event property representing channel that has gone online.
            </summary>
        </member>
        <member name="F:TwitchLib.Api.Services.Events.LiveStreamMonitor.OnStreamUpdateArgs.Stream">
            <summary>
            Event property representing live stream information.
            </summary>
        </member>
        <member name="T:TwitchLib.Api.Services.Events.OnChannelsSetArgs">
            <inheritdoc />
            <summary>
            Class representing EventArgs for the OnChannelsSet event.
            </summary>
        </member>
        <member name="F:TwitchLib.Api.Services.Events.OnChannelsSetArgs.Channels">
            <summary>
            The channels the service is currently monitoring.
            </summary>
        </member>
        <member name="T:TwitchLib.Api.Services.Events.OnServiceStartedArgs">
            <inheritdoc />
            <summary>
            Class representing EventArgs for the OnServiceStarted event.
            </summary>
        </member>
        <member name="T:TwitchLib.Api.Services.Events.OnServiceStoppedArgs">
            <inheritdoc />
            <summary>
            Class representing EventArgs for the OnServiceStopped event.
            </summary>
        </member>
        <member name="T:TwitchLib.Api.Services.Events.OnServiceTickArgs">
            <inheritdoc />
            <summary>
            Class representing EventArgs for the OnServiceTick event.
            </summary>
        </member>
        <member name="P:TwitchLib.Api.Services.FollowerService.KnownFollowers">
            <summary>
            The current known followers for each channel.
            </summary>
        </member>
        <member name="P:TwitchLib.Api.Services.FollowerService.QueryCountPerRequest">
            <summary>
            The amount of followers queried per request.
            </summary>
        </member>
        <member name="P:TwitchLib.Api.Services.FollowerService.CacheSize">
            <summary>
            The maximum amount of followers cached per channel.
            </summary>
        </member>
        <member name="E:TwitchLib.Api.Services.FollowerService.OnNewFollowersDetected">
            <summary>
            Event which is called when new followers are detected.
            </summary>
        </member>
        <member name="M:TwitchLib.Api.Services.FollowerService.#ctor(TwitchLib.Api.Interfaces.ITwitchAPI,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            FollowerService constructor.
            </summary>
            <exception cref="T:System.ArgumentNullException">When the <paramref name="api"/> is null.</exception>
            <exception cref="T:System.ArgumentException">When the <paramref name="checkIntervalInSeconds"/> is lower than one second.</exception> 
            <exception cref="T:System.ArgumentException">When the <paramref name="queryCountPerRequest" /> is less than 1 or more than 100 followers per request.</exception>
            <exception cref="T:System.ArgumentException">When the <paramref name="cacheSize" /> is less than the queryCountPerRequest.</exception>
            <param name="api">The api to use for querying followers.</param>
            <param name="checkIntervalInSeconds">How often new followers should be queried.</param>
            <param name="queryCountPerRequest">The amount of followers to query per request.</param>
            <param name="cacheSize">The maximum amount of followers to cache per channel.</param>
            <param name="invokeEventsOnStartup">Whether to invoke the update events on startup or not.</param>
        </member>
        <member name="M:TwitchLib.Api.Services.FollowerService.ClearCache">
            <summary>
            Clears the existing cache.
            </summary>
        </member>
        <member name="M:TwitchLib.Api.Services.FollowerService.SetChannelsById(System.Collections.Generic.List{System.String})">
            <summary>
            Sets the channels to monitor by id. Event's channel properties will be Ids in this case.
            </summary>
            <exception cref="T:System.ArgumentNullException">When <paramref name="channelsToMonitor"/> is null.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="channelsToMonitor"/> is empty.</exception>
            <param name="channelsToMonitor">A list with channels to monitor.</param>
        </member>
        <member name="M:TwitchLib.Api.Services.FollowerService.SetChannelsByName(System.Collections.Generic.List{System.String})">
            <summary>
            Sets the channels to monitor by name. Event's channel properties will be names in this case.
            </summary>
            <exception cref="T:System.ArgumentNullException">When <paramref name="channelsToMonitor"/> is null.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="channelsToMonitor"/> is empty.</exception>
            <param name="channelsToMonitor">A list with channels to monitor.</param>
        </member>
        <member name="M:TwitchLib.Api.Services.FollowerService.UpdateLatestFollowersAsync(System.Boolean)">
            <summary>
            Updates the followerservice with the latest followers. Automatically called internally when service is started.
            </summary>
            <param name="callEvents">Whether to invoke the update events or not.</param>
        </member>
        <member name="P:TwitchLib.Api.Services.LiveStreamMonitorService.LiveStreams">
            <summary>
            A cache with streams that are currently live.
            </summary>
        </member>
        <member name="P:TwitchLib.Api.Services.LiveStreamMonitorService.MaxStreamRequestCountPerRequest">
            <summary>
            The maximum amount of streams to collect per request.
            </summary>
        </member>
        <member name="E:TwitchLib.Api.Services.LiveStreamMonitorService.OnStreamOnline">
            <summary>
            Invoked when a monitored stream went online.
            </summary>
        </member>
        <member name="E:TwitchLib.Api.Services.LiveStreamMonitorService.OnStreamOffline">
            <summary>
            Invoked when a monitored stream went offline.
            </summary>
        </member>
        <member name="E:TwitchLib.Api.Services.LiveStreamMonitorService.OnStreamUpdate">
            <summary>
            Invoked when a monitored stream was already online, but is updated with it's latest information (might be the same).
            </summary>
        </member>
        <member name="M:TwitchLib.Api.Services.LiveStreamMonitorService.#ctor(TwitchLib.Api.Interfaces.ITwitchAPI,System.Int32,System.Int32)">
            <summary>
            The constructor from the LiveStreamMonitorService
            </summary>
            <exception cref="T:System.ArgumentNullException">When the <paramref name="api"/> is null.</exception>
            <exception cref="T:System.ArgumentException">When the <paramref name="checkIntervalInSeconds"/> is lower than one second.</exception> 
            <exception cref="T:System.ArgumentException">When the <paramref name="maxStreamRequestCountPerRequest"/> is less than 1 or more than 100.</exception> 
            <param name="api">The api used to query information.</param>
            <param name="checkIntervalInSeconds"></param>
            <param name="maxStreamRequestCountPerRequest"></param>
        </member>
        <member name="T:TwitchLib.Api.ThirdParty.ThirdParty">
            <summary>These endpoints are offered by third party services (NOT TWITCH), but are still pretty cool.</summary>
        </member>
        <member name="M:TwitchLib.Api.TwitchAPI.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,TwitchLib.Api.Core.Interfaces.IRateLimiter,TwitchLib.Api.Core.Interfaces.IApiSettings,TwitchLib.Api.Core.Interfaces.IHttpCallHandler)">
            <summary>
            Creates an Instance of the TwitchAPI Class.
            </summary>
            <param name="loggerFactory">Instance Of LoggerFactory, otherwise no logging is used, </param>
            <param name="rateLimiter">Instance Of RateLimiter, otherwise no ratelimiter is used.</param>
            <param name="settings">Instance of ApiSettings, otherwise defaults used, can be changed later</param>
            <param name="http">Instance of HttpCallHandler, otherwise default handler used</param>
        </member>
    </members>
</doc>
