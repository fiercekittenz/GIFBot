@page "/backdrop"
@using Microsoft.AspNetCore.SignalR.Client
@using GIFBot.Shared
@using GIFBot.Shared.Models.Base
@using GIFBot.Shared.Models.Visualization
@using System.Text.Json
@using Microsoft.AspNetCore.Http.Connections
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@implements IAsyncDisposable

@layout BasicLayout
<!-- Special Thanks to exegete46 and jairs_corner for the css help! -->

@if (mBackdropVisible)
{
   <div style="position: relative; align-content: center; top: @mTop; left: @mLeft; width: @mWidth; height: @mHeight">

      @if (AnimationLibrary.GetFileTypeOfAnimation(mCurrentBackdrop.Visual) == AnimationEnums.FileType.Image)
      {
         <center><img id="animation" src="@mFormattedVisual" width="@mIntWidth" height="@mIntHeight" /></center>
      }
      else if (AnimationLibrary.GetFileTypeOfAnimation(mCurrentBackdrop.Visual) == AnimationEnums.FileType.Video)
      {
         <video id="videoAnimation" width="480" height="320" style="display: none;background-color: transparent">
            <source src="">
         </video>
      }

   </div>
}

@code
{
   /// <summary>
   /// Override for handling the initialized event. Will establish the connection to the hub
   /// and create lambda methods for specific messages.
   /// </summary>
   protected override async Task OnInitializedAsync()
   {
      // Build the connection to the main bot hub.
      mHubConnection = new HubConnectionBuilder()
         .WithUrl(NavigationManager.ToAbsoluteUri("/gifbothub"), HttpTransportType.LongPolling) 
         .Build();

      // Detect a disconnection and immediately reconnect. This will fix if a user
      // has a PC that went to sleep or if someone stopped/restarted the bot and OBS
      // didn't pick up the change.
      mHubConnection.Closed += async (e) =>
      {
         Console.WriteLine("Disconnected from the gifbot hub!");
         await ConnectToHub();
      };

      mHubConnection.On<string>("HangBackdrop", async (data) =>
      {
         PlacedVisualBase placedBackdrop = JsonSerializer.Deserialize<PlacedVisualBase>(data);
         await HangBackdrop(placedBackdrop);
      });

      mHubConnection.On("TakeDownBackdrop", () =>
      {
         mBackdropVisible = false;
         StateHasChanged();
      });

      await ConnectToHub();
   }

   /// <summary>
   /// IAsyncDisposable Implementation
   /// </summary>
   public async ValueTask DisposeAsync()
   {
      await mHubConnection.DisposeAsync();
   }

   /// <summary>
   /// Handles connection to the hub.
   /// </summary>
   private async Task ConnectToHub()
   {
      while (!IsConnected)
      {
         Console.WriteLine("Connecting...");
         await Task.Delay(1000);

         try
         {
            HttpResponseMessage results = await Http.GetAsync("http://localhost:5000/ping/pong");
            if (results.StatusCode == System.Net.HttpStatusCode.OK)
            {
               // Start the connection.
               await mHubConnection.StartAsync();
            }
         }
         catch (Exception /*ex*/)
         {
            Console.WriteLine("Server is still down. Reconnection attempt in 1 second.");
         }
      }

      Console.WriteLine("Connection established!");
   }

   /// <summary>
   /// Handles placing the backdrop once a request has been received.
   /// </summary>
   private async Task HangBackdrop(PlacedVisualBase backdrop)
   {
      if (backdrop != null)
      {
         mCurrentBackdrop = backdrop;
         mFormattedVisual = $"{mCurrentBackdrop.Visual}?{System.DateTimeOffset.UtcNow.ToUnixTimeSeconds()}";

         mBackdropVisible = true;

         StateHasChanged();

         // If this is a video, play it.
         if (AnimationLibrary.GetFileTypeOfAnimation(backdrop.Visual) == AnimationEnums.FileType.Video)
         {
            await JSRuntime.InvokeVoidAsync("PlayVideoWithLooping", mFormattedVisual, 0, mWidth, mHeight);
         }
      }
   }

   /// <summary>
   /// Denotes if the hub has properly connected or not.
   /// </summary>
   public bool IsConnected => mHubConnection.State == HubConnectionState.Connected;

   #region Private Members

   private HubConnection mHubConnection;

   public string mTop = "0px";
   public string mLeft = "0px";
   public string mHeight = "1080px";
   public string mWidth = "1920px";
   public int mIntHeight = 1080;
   public int mIntWidth = 1920;

   public PlacedVisualBase mCurrentBackdrop = new PlacedVisualBase();
   public bool mBackdropVisible = false;
   public string mFormattedVisual = String.Empty;

   public const string mDisconnectedWarning = "DISCONNECTED! You have to run the bot, then refresh your browser source cache in your broadcaster software.";

   #endregion
}
